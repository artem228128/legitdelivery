const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Å–º–µ—à–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
const PRODUCTS_FILE = path.join(__dirname, '../src/products_jsons/all_products_mixed.json');

function addIdsToProducts() {
  console.log('üîÑ –î–æ–±–∞–≤–ª—è—é —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ ID –∫ —Ç–æ–≤–∞—Ä–∞–º...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = JSON.parse(fs.readFileSync(PRODUCTS_FILE, 'utf8'));
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    const updatedProducts = products.map((product, index) => {
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ SKU –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      let id;
      
      if (product.sku) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è ID
        id = `json_${product.sku}`;
      } else if (product.title && product.brand) {
        // –ï—Å–ª–∏ –Ω–µ—Ç SKU, —Å–æ–∑–¥–∞–µ–º ID –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –±—Ä–µ–Ω–¥–∞
        const cleanTitle = product.title.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
        const cleanBrand = product.brand.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
        id = `json_${cleanBrand}_${cleanTitle.substring(0, 20)}_${index}`;
      } else {
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
        id = `json_product_${index}`;
      }
      
      return {
        ...product,
        id: id,
        stable_id: true // –ú–∞—Ä–∫–µ—Ä —á—Ç–æ ID —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
      };
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã ID
    const ids = updatedProducts.map(p => p.id);
    const uniqueIds = new Set(ids);
    if (ids.length !== uniqueIds.size) {
      console.warn('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID, –¥–æ–±–∞–≤–ª—è—é —Å—É—Ñ—Ñ–∏–∫—Å—ã...');
      
      const idCounts = {};
      const finalProducts = updatedProducts.map(product => {
        let id = product.id;
        if (idCounts[id]) {
          idCounts[id]++;
          id = `${product.id}_${idCounts[id]}`;
        } else {
          idCounts[id] = 1;
        }
        return { ...product, id };
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(finalProducts, null, 2));
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ ID –∫ ${finalProducts.length} —Ç–æ–≤–∞—Ä–∞–º`);
    } else {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(updatedProducts, null, 2));
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ ID –∫ ${updatedProducts.length} —Ç–æ–≤–∞—Ä–∞–º`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const idTypes = {
      sku: updatedProducts.filter(p => p.id.includes(p.sku)).length,
      generated: updatedProducts.filter(p => !p.id.includes(p.sku)).length
    };
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ID:`);
    console.log(`   - –ù–∞ –æ—Å–Ω–æ–≤–µ SKU: ${idTypes.sku}`);
    console.log(`   - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${idTypes.generated}`);
    console.log(`üìÅ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${PRODUCTS_FILE}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addIdsToProducts(); 