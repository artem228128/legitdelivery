const express = require('express');
const cors = require('cors');
const { GoogleAuth } = require('google-auth-library');
const { google } = require('googleapis');

const app = express();
const PORT = 3001;

// –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
const requestLimits = new Map();

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  for (const [ip, data] of requestLimits.entries()) {
    if (now - data.lastRequest > 5 * 60 * 1000) {
      requestLimits.delete(ip);
    }
  }
}, 5 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
function checkRateLimit(ip) {
  const now = Date.now();
  const limit = requestLimits.get(ip);
  
  if (!limit) {
    requestLimits.set(ip, {
      count: 1,
      lastRequest: now,
      firstRequest: now
    });
    return true;
  }
  
  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞
  if (now - limit.firstRequest > 60 * 60 * 1000) {
    requestLimits.set(ip, {
      count: 1,
      lastRequest: now,
      firstRequest: now
    });
    return true;
  }
  
  // –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  if (now - limit.lastRequest < 60 * 1000) {
    if (limit.count >= 10) {
      return false;
    }
    limit.count++;
  } else {
    limit.count = 1;
  }
  
  limit.lastRequest = now;
  return true;
}

app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Auth —Å Service Account
const auth = new GoogleAuth({
  keyFile: './google-credentials.json',
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
});

const sheets = google.sheets({ version: 'v4', auth });

const SHEET_ID = '15LQwJJHEwVdnM6mtV6Ocf4u4zkNiclBXT4Uw39twzys';

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∏–Ω–≥–∞
app.get('/api/tracking/:trackingId', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    const ip = req.headers['x-forwarded-for'] || 
               req.headers['x-real-ip'] || 
               req.connection.remoteAddress || 
               req.socket.remoteAddress ||
               req.connection.socket?.remoteAddress || 
               'unknown';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (!checkRateLimit(ip)) {
      return res.status(429).json({ 
        error: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        retryAfter: 60
      });
    }

    const { trackingId } = req.params;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    if (trackingId.length < 3 || trackingId.length > 50) {
      return res.status(400).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (!/^[A-Za-z0-9-_]+$/.test(trackingId)) {
      return res.status(400).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è' });
    }
    
    console.log(`üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞: ${trackingId} (IP: ${ip})`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: 'A:C', // –ß–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ A, B –∏ C
    });
    
    const rows = response.data.values;
    
    if (!rows || rows.length === 0) {
      return res.status(404).json({ 
        error: '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ' 
      });
    }
    
    // –ò—â–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ
    const headerRow = rows[0];
    const dataRows = rows.slice(1);
    
    const trackingRow = dataRows.find(row => 
      row[0] && row[0].toString().toLowerCase() === trackingId.toLowerCase()
    );
    
    if (!trackingRow) {
      return res.status(404).json({ 
        error: '–ù–æ–º–µ—Ä –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
      });
    }
    
    const statusNumber = parseInt(trackingRow[1]);
    
    if (isNaN(statusNumber) || statusNumber < 1 || statusNumber > 13) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º—ñ' 
      });
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ–ª—å—à–µ 13, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ 13 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    const finalStatus = Math.min(statusNumber, 13);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫: ${trackingRow[0]}, —Å—Ç–∞—Ç—É—Å: ${statusNumber} (IP: ${ip})`);
    
    res.json({
      trackingId: trackingRow[0],
      statusNumber: finalStatus,
      deliveryTime: trackingRow[2] || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ', // –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ 3-–π –∫–æ–ª–æ–Ω–∫–∏
      success: true
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö' 
    });
  }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/tracking-data', async (req, res) => {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: 'A:C', // –ß–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ A, B –∏ C
    });
    
    const rows = response.data.values;
    
    res.json({
      data: rows,
      success: true
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö' 
    });
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Google Sheets ID: ${SHEET_ID}`);
  console.log(`üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
}); 